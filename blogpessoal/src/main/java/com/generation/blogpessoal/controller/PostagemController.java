package com.generation.blogpessoal.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.generation.blogpessoal.model.Postagem;
import com.generation.blogpessoal.repository.PostagemRepository;
import com.generation.blogpessoal.repository.TemaRepository;

/**
 * 
 * A anota√ß√£o @RestController: indica que a Classe √© uma RestController, ou seja, 
 * √© respons√°vel por responder todas as requisi√ß√µes http enviadas para um endpoint 
 * (endere√ßo) definido na anota√ß√£o @RequestMapping
 * 
 * A anota√ß√£o @RequestMapping("/postagens"): indica o endpoint (endere√ßo) que a 
 * controladora responder√° as requisi√ß√µes 
 * 
 * A anota√ß√£o @CrossOrigin("*"): indica que a classe controladora permitir√° o 
 * recebimento de requisi√ß√µes realizadas de fora do dom√≠nio (localhost, em nosso caso) ao qual 
 * ela pertence. Essa anota√ß√£o √© essencial para que o front-end (Angular ou React), tenha
 * acesso √† nossa API (O termo t√©cnico √© consumir a API)
 * 
 * Para as vers√µes mais recentes do Angular e do React, √© necess√°rio configurar esta anota√ß√£o 
 * com os seguintes par√¢metros: @CrossOrigin(origins = "*", allowedHeaders = "*") 
 * 
 * Esta anota√ß√£o, al√©m de liberar todas as origens (origins), libera tamb√©m todos os par√¢metros
 * do cabe√ßalho das requisi√ß√µes (allowedHeaders).
 * 
 * Em produ√ß√£o, o * √© substituido pelo endere√ßo de dom√≠nio (exemplo: www.meudominio.com) do Frontend
 * 
 */

@RestController
@RequestMapping("/postagens")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class PostagemController {

	/*
	 * Inje√ß√£o de Depend√™ncia (@Autowired): Consiste  na  maneira,  ou  seja,  na  implementa√ß√£o 
	 * utilizada pelo  Spring  Framework  de  aplicar  a  Invers√£o  de  Controle  quando  for 
	 * necess√°rio.
	 * 
	 * A Inje√ß√£o de Depend√™ncia define quais classes ser√£o instanciadas e em quais lugares ser√£o 
	 * injetadas quando houver necessidade. 
	 * 
	 * Em nosso exemplo a classe controladora cria um ponto de inje√ß√£o da interface PostagemRepository, 
	 * e quando houver a necessidade o Spring Framework ir√° criar uma inst√¢ncia (objeto) desta interface
	 * permitindo o uso de todos os m√©todos (padr√£o ou personalizados da Interface PostagemRepository)
	 *  
	 * */
	
	@Autowired
	private PostagemRepository postagemRepository;
	
	@Autowired
	private TemaRepository temaRepository;
	
	 /**
	 * Listar todas as Postagens
	 *  
	 * A anota√ß√£o @GetMapping: indica que o m√©todo abaixo responder√° todas as 
	 * requisi√ß√µes do tipo GET que forem enviadas no endpoint /postagens
	 * 
	 * O M√©todo getAll() ser√° do tipo ResponseEntity porque ele responder√° a requisi√ß√£o (Request),
	 * com uma HTTP Response (Resposta http).
	 * 
	 * <List<Postagem>>: O M√©todo al√©m de retornar um objeto da Classe ResponseEntity (OK ü°™ 200), 
	 * no par√¢metro body (Corpo da Resposta), ser√° retornado um Objeto da Classe List (Collection), 
	 * contendo todos os Objetos da Classe Postagem persistidos no Banco de dados, na tabela 
	 * tb_postagens. Observe que nesta linha foi utilizado um recurso chamado Java Generics, 
	 * que al√©m de simplificar o retorno do Objeto da Classe List, dispensa o uso do casting(mudan√ßa de tipos). 
	 * Observe que na defini√ß√£o do M√©todo foram utilizados os s√≠mbolos <T>, onde T √© o Tipo do Objeto 
	 * que ser√° retornado no Corpo da Resposta.
	 * 
	 * return ResponseEntity.ok(postagemRepository.findAll());: Executa o m√©todo findAll() (M√©todo padr√£o da 
	 * Interface JpaRepository), que retornar√° todos os Objetos da Classe Postagem persistidos no Banco de dados
	 * (<List<Postagem>>). Como a List sempre ser√° gerada (vazia ou n√£o), o M√©todo sempre retornar√° o Status 200 ü°™ OK.
	 * 
	 * O M√©todo findAll() √© equivalente a consulta no MySQL: SELECT * FROM tb_postagens;
	 * 
	 */
	
	@GetMapping // criar m√©todo
	public ResponseEntity<List<Postagem>> getAll() { 
		return ResponseEntity.ok(postagemRepository.findAll()); // o ok √© para resposta 200: sucesso.
	
	}

	/*
	 * Listar postagem por id - utilizando Express√µes Lambda
	 *  
	 * As express√µes Lambda representam uma fun√ß√£o an√¥nima, ou seja, uma fun√ß√£o lambda √© uma fun√ß√£o sem declara√ß√£o, 
	 * isto √©, n√£o √© necess√°rio colocar um nome, um tipo de retorno e o modificador de acesso. A ideia √© que o 
	 * m√©todo seja declarado no mesmo lugar em que ser√° usado. As express√µes lambda em Java tem a sintaxe definida 
	 * como: (argumento) -> (corpo). Elas s√£o semelhantes as Arrow Functions do Javascript/Typescript.
	 * 
	 * @GetMapping("/{id}"): Anota√ß√£o que indica que o m√©todo abaixo responder√° todas as requisi√ß√µes do tipo GET 
	 * que forem enviadas no endpoint /postagens/id, onde id √© uma vari√°vel de caminho (path variable), que
	 * receber√° em nosso o exemplo o Id que voc√™ deseja encontrar
	 * 
	 * O M√©todo getById(@PathVariable Long id) ser√° do tipo ResponseEntity porque ele responder√° a 
	 * requisi√ß√£o (Request), com uma HTTP Response (Resposta http), em nosso exemplo a Response Status 200 => OK, 
	 * caso a Postagem seja encontrada. Caso n√£o seja encontrada, a resposta ser√° Not Found => 404 (N√£o Encontrada).
	 * 
	 * @PathVariable Long id: Anota√ß√£o que insere a vari√°vel de caminho (path variable) id, que foi informada no 
	 * endere√ßo da requisi√ß√£o, e insere no par√¢metro id do m√©todo getById.
	 * 
	 * Exemplo: http://localhost:8080/postagens/1
	 *
	 * o par√¢metro id do m√©todo receber√° o valor 1 (Id que ser√° procurado na tabela postagens atrav√©s do m√©todo findById(id)) 
	 * 
	 * <Postagem>: Como o M√©todo listar√° apenas 1 registro da nossa tabela, o m√©todo retornar√° 
	 * dentro da resposta um objeto do tipo Postagem, que s√£o os dados encontrados na tabela.
	 * 
	 * return postagemRepository.findById(id): Retorna a execu√ß√£o do m√©todo findById(id)
	 * 
	 * .map(resposta -> ResponseEntity.ok(resposta)): Se a postagem existir, a fun√ß√£o map (tipo Optional), aplica
	 * o valor do objeto resposta (objeto do tipo Postagem com o retorno do m√©todo findById(id) no m√©todo: 
	 * ResponseEntity.ok(resposta); e retorna o status OK => 200
	 * 
	 * .orElse(ResponseEntity.notFound().build()); : Se a postagem n√£o for encontrada, retorna o status Not Found => 404
	 * 
	 * Optional (map): √â um cont√™iner para um valor que pode estar ausente. Em nosso contexto, tem como 
	 * principal fun√ß√£o evitar o erro do tipo NullPointerException (Objeto nulo), caso a Postagem procurada 
	 * pelo m√©todo findById(id)n√£o seja encontrada na Model Postagens.
	 * 
	 */
	
	
	@GetMapping("/{id}") // o valor dentro das {} √© uma variavel de caminho
	public ResponseEntity<Postagem> getById(@PathVariable Long id) { 
		return postagemRepository.findById(id)
				.map(resposta -> ResponseEntity.ok(resposta)) 
				.orElse(ResponseEntity.notFound().build()); //O lambda ajuda a enxgar o c√≥d tamb√©m!
		
	}

	/*
	 * Consultar postagens por titulo 
	 * 
	 * @GetMapping("/titulo/{titulo}"): Anota√ß√£o que indica que o m√©todo abaixo responder√° todas
	 * as requisi√ß√µes do tipo GET que forem enviadas no endpoint /postagens/titulo/titulo, onde
	 * a segunda palavra titulo √© uma vari√°vel de caminho (path variable), que receber√° em nosso
	 * exemplo a String (palavra, s√≠laba e etc), que voc√™ deseja encontrar na tabela tb_postagens
	 *  
	 * O M√©todo getByTitulo(@PathVariable Long titulo) ser√° do tipo ResponseEntity porque ele responder√° a 
	 * requisi√ß√£o (Request), com uma HTTP Response (Resposta http), neste caso Response Status 200 => OK, 
	 * independente da Postagem ser ou n√£o encontrada. O m√©todo retornar√° uma lista de Postagens
	 * vazia, caso nenhuma postagem que atenda ao crit√©rio de busca seja encontrada.
	 * 
	 * @PathVariable String titulo: Anota√ß√£o que insere o valor da vari√°vel de caminho titulo, 
	 * informada no endere√ßo da requisi√ß√£o e insere no par√¢metro titulo do m√©todo getByTitulo
	 * 
	 * Exemplo: http://localhost:8080/postagens/titulo/primeira
	 * 
	 * o par√¢metro titulo do m√©todo receber√° a String "primeira" (palavra que ser√° procurada na tabela postagens 
	 * no campo titulo via findAllByTituloContainingIgnoreCase(titulo))
	 * 
	 * <List<Postagem>>: Como o M√©todo listar√° todos os registros da nossa tabela, que possuam a string enviada
	 * pelo path, o m√©todo retornar√° dentro da resposta um objeto do tipo List (Collection) preenchido com 
	 * objetos do tipo Postagem, que s√£o os dados da tabela.
	 * 
	 * return ResponseEntity.ok(postagemRepository.findAllByTituloContainingIgnoreCase(titulo));: Executa o 
	 * m√©todo findAllByTituloContainingIgnoreCase(titulo) e retorna o status OK => 200
	 * 
	 * Como o M√©todo sempre ir√° criar a List independente ter ou n√£o valores na tabela, ele sempre
	 * retornar√° 200.
	 * 
	 */
	
	@GetMapping("/titulo/{titulo}") /* variavel titulo relacionada l√° com a colecction da Interface */
	public ResponseEntity<List<Postagem>> getByTitulo(@PathVariable String titulo) {
		return ResponseEntity.ok(postagemRepository.findAllByTituloContainingIgnoreCase(titulo));
	}

	
	
	/*
	 * Criar nova postagem 
	 * 
	 * @PostMapping: Anota√ß√£o que indica que o m√©todo abaixo responder√° todas
	 * as requisi√ß√µes do tipo POST que forem enviadas no endpoint /postagens
	 * 
	 * O M√©todo ResponseEntity<Postagem> postPostagem (@RequestBody Postagem postagem) ser√° do tipo 
	 * ResponseEntity porque ele responder√° a requisi√ß√£o (Request), com uma HTTP Response (Resposta http), 
	 * neste caso Response Status 201 => CREATED, caso a Postagem seja inserida na tabela. Caso n√£o seja 
	 * inserida na tabela, a resposta ser√° Internal Server Error => 500
	 * 
	 * @Valid: Valida o Objeto Postagem enviado no corpo da requisi√ß√£o (Request Body), conforme as regras
	 * definidas na Model Postagem. Caso algum atributo n√£o seja validado, o m√©todo retornar√° um status
	 * 400 => Bad Request.
	 * 
	 * @RequestBody Postagem postagem: Anntotation (anota√ß√£o) que insere o objeto do tipo Postagem enviado
	 * no corpo da requisi√ß√£o (Request Body) e insere no par√¢metro postagem do m√©todo postPostagem
	 * 
	 * <Postagem>: O M√©todo retornar√° dentro da resposta um objeto do tipo Postagem, que s√£o os dados da tabela.
	 *  
	 * return ResponseEntity.status(HttpStatus.CREATED).body(postagemRepository.save(postagem));: Executa o 
	 * m√©todo save(postagem) e retorna o status CREATED = 201 se o objeto Postagem foi inserido na tabela 
	 * postagens no Banco de dados.
	 * 
	 * Ao fazer o envio dos dados via Insomnia ou front-end, n√£o √© necess√°rio passar o Id e a Data
	 * 
	 */
	
	@PostMapping
	public ResponseEntity<Postagem> postPostagem (@Valid @RequestBody Postagem postagem){
		
		/* Checa antes de Persistir o Objeto Postagem se o Tema existe 
		 *  Se o Objeto Tema n√£o existir, o status devolvido ser√° Bad Request (400).
		*/

		if (temaRepository.existsById(postagem.getTema().getId()))
			return ResponseEntity.status(HttpStatus.CREATED).body(postagemRepository.save(postagem));
	
		return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
	
	}
	
	/*	@PutMapping
	 *	public ResponseEntity <Postagem> putPostagem(@Valid @RequestBody Postagem postagem) {
	 *		estou atualizando, nesse caso, o Objeto Postagem. ele sabe q √© atualiza√ß√£o com base no ID, que √© √∫nico
	 *	return ResponseEntity.status(HttpStatus.OK) /*status
	 *				.body(postagemRepository.save(postagem)); corpo
	 *		aqui eu salvo o objeto que inseri com postPostagem.
	 *	} 
	 *
	 *
	 * @PutMapping //desafio 1 
	 * public 
	 * ResponseEntity<Postagem> putPostagem  (@Valid @RequestBody Postagem postagem) { 
	 * return postagemRepository.findById(postagem.getId()) // get puxa de um ID ja existente
	 *  	.map(resposta -> ResponseEntity.status(HttpStatus.OK)
	 * 		.body(postagemRepository.save(postagem))) //realiza se resposta n for nulla
	 * 		.orElse(ResponseEntity.notFound().build()); //realiza se a resposta for nulla
	 * }
	 */

	
	/*
	 * Editar uma postagem 
	 * 
	 * @PutMapping: Annotation (Anota√ß√£o), que indica que o m√©todo abaixo responder√° todas
	 * as requisi√ß√µes do tipo PUT que forem enviadas no endpoint /postagens
	 * 
	 * O M√©todo ResponseEntity<Postagem> putPostagem (@RequestBody Postagem postagem) ser√° do tipo 
	 * ResponseEntity porque ele responder√° a requisi√ß√£o (Request), com uma HTTP Response (Resposta http), 
	 * neste caso Response Status 200 => OK, caso a Postagem seja atualizada na tabela. Caso n√£o seja 
	 * atualizada na tabela, a resposta ser√° Internal Server Error => 500
	 * 
	 * @Valid: Valida o Objeto Postagem enviado no corpo da requisi√ß√£o (Request Body), conforme as regras
	 * definidas na Model Postagem. Caso algum atributo n√£o seja validado, o m√©todo retornar√° um status
	 * 400 => Bad Request.
	 * 
	 * @RequestBody Postagem postagem: Anntotation (anota√ß√£o) que insere o objeto do tipo Postagem enviado
	 * no corpo da requisi√ß√£o (Request Body) e insere no par√¢metro postagem do m√©todo postPostagem
	 * 
	 * <Postagem>: O M√©todo retornar√° dentro da resposta um objeto do tipo Postagem, que s√£o os dados da tabela.
	 *  
	 * return postagemRepository.findById(postagem.getId()): Retorna a execu√ß√£o do m√©todo findById(postagem.getId()).
	 * Observe que o Id da postagem √© obtido atrav√©s do m√©todo getId() que retorna o Id da Postagem enviada no Corpo
	 * da requisi√ß√£o (Request Body)
	 * 
	 * .map(resposta -> ResponseEntity.ok().body(postagemRepository.save(postagem))): Se a postagem existir, a fun√ß√£o 
	 *  map (tipo Optional), executa o m√©todo save(postagem) e retorna o status OK = 200 se o objeto Postagem foi 
	 *  atualizado na tabela postagens no Banco de dados.
	 * 
	 * .orElse(ResponseEntity.notFound().build());: Se a postagem n√£o for encontrada pelo m√©todo findById(postagem.getId()), 
	 * retorna o status Not Found = 404
	 *
	 * Optional (map): √â um cont√™iner para um valor que pode estar ausente. Em nosso contexto, tem como 
	 * principal fun√ß√£o evitar o erro do tipo NullPointerException (Objeto nulo), caso a Postagem procurada 
	 * pelo m√©todo findById(id)n√£o seja encontrada na Model Postagens.
	 * 
	 * Ao fazer o envio dos dados via Postman ou front-end √© necess√°rio passar o Id para identificar qual a 
	 * Postagem ser√° atualizada.
	 *  
	 */
	/* @PutMapping Desafio 21/02 com Geraldo
	*	public ResponseEntity<Postagem> putPostagem(@Valid @RequestBody Postagem postagem) {
	*	if (temaRepository.existsById(postagem.getTema().getId())) {
	*		return postagemRepository.findById(postagem.getId())
	*				.map(resposta -> ResponseEntity.status(HttpStatus.OK).body(postagemRepository.save(postagem)))
	*				// reliza se resposta nao for nulla
	*				.orElse(ResponseEntity.notFound().build());
	*				// realiza se a resposta for nulla
	*
	*	} else {
	*		return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	*	}
	*	}
	*/
	
	@PutMapping
	public ResponseEntity<Postagem> putPostagem (@Valid @RequestBody Postagem postagem){
		
		/** Substituimos o Lambda por 2 Condicionais, que testam respectivamente se o
		 *  Objeto Postagem existe e se o Objeto Tema existe antes de atualizar o Objeto
		 *  Postagem.
		 * 
		 *  Se o Objeto Postagem n√£o existir, o Objeto Tema n√£o ser√° verificado e o status devolvido ser√° Not Found (404).
		 *  Se o Objeto Tema n√£o existir, o status devolvido ser√° Bad Request (400).
		*/

		if (postagemRepository.existsById(postagem.getId())){
			
			if (temaRepository.existsById(postagem.getTema().getId()))
				return ResponseEntity.status(HttpStatus.OK)
						.body(postagemRepository.save(postagem));
			
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}					
		return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	}
	

	
	/*
	 * Deletar uma postagem 
	 *   
	 * @DeleteMapping("/{id}"): Annotation (Anota√ß√£o), que indica que o m√©todo abaixo responder√° todas
	 * as requisi√ß√µes do tipo DELETE que forem enviadas no endpoint /postagens/id
	 * 
	 * O M√©todo deletePostagem(@PathVariable Long id)  ser√° do tipo ResponseEntity porque ele responder√° a 
	 * requisi√ß√£o (Request), com uma HTTP Response (Resposta http), neste caso Response Status 204 => NO_CONTENT 
	 * caso a Postagem seja encontrada e exclu√≠da da tabela. Caso n√£o seja encontrada, a resposta ser√° 
	 * Not Found => 404
	 * 
	 * A Annotation @PathVariable Long id: insere a vari√°vel de path (caminho ou url do endpoint), 
	 * passada no endere√ßo da requisi√ß√£o, e insere no par√¢metro id do m√©todo deletePostagem
	 * 
	 * Exemplo: http://localhost:8080/postagens/1
	 *  
	 * o par√¢metro id do m√©todo receber√° o valor 1 (Id que ser√° procurado na tabela postagens e deletado via deleteById())
	 * 
	 * <?>: O ?, no contexto de gen√©ricos, basicamente serve como um coringa, ou seja, ele representa "qualquer tipo". 
	 * Sua fun√ß√£o √© permitir o uso do polimorfismo junto com gen√©ricos, logo voc√™ n√£o est√° definindo um tipo espec√≠fico 
	 * para retorno. Como Delete n√£o retorna nada, o tipo ResponseEntity<Void> √© o tipo gen√©rico que ser√° retornado.
	 * 
	 * return postagemRepository.findById(id): Retorna a execu√ß√£o do m√©todo findById(id). Observe que o Id da postagem
	 * foi passado via path (caminho ou url do endpoint)
	 * 
	 * .map(resposta -> {
	 *				postagemRepository.deleteById(id);
	 *				return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
	 *			})
	 *
	 * O Trecho de c√≥digo acima ser√° executado se a postagem for encontrada pelo m√©todo findById. Primeiro, o m√©todo 
	 * deleteById(id) ir√° excluir a postagem da tabela postagens. Na sequ√™ncia, ser√° retornado o status NO_CONTENT = 204 
	 * indicando que a postagem foi exclu√≠da e n√£o existe mais.
	 * 
	 * .orElse(ResponseEntity.notFound().build()): Caso a Postagem n√£o seja encontrada pelo m√©todo findById, a resposta 
	 * ser√° Not Found => 404
	 * 
	 */
	
	@DeleteMapping("/{id}") // desafio 2
	public ResponseEntity<?> deletePostagem(@PathVariable Long id) {

		return postagemRepository.findById(id)
				.map(resposta -> {
						postagemRepository.deleteById(id);
						return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
				})
					.orElse(ResponseEntity.notFound().build());
	}

}